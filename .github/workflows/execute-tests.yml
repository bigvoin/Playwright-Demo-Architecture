name: Shard image generator

on:
  workflow_dispatch:
    inputs:
      container_branch:
        description: Which branch to use the docker container
        required: true
        default: main

jobs:
  run-playwright-on-ec2:
    name: Run Playwright on EC2
    runs-on: ubuntu-latest
    env:
      REGION: eu-north-1
      INSTANCE_TYPE: m7a.4xlarge
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Start EC2 instance
        id: ec2-start
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ secrets.NEW_EC2_AMI_ID }} \
            --count 1 \
            --instance-type $INSTANCE_TYPE \
            --key-name ${{ secrets.EC2_SSH_KEY_NAME }} \
            --subnet-id ${{ secrets.NEW_EC2_SUBNET_ID }} \
            --security-group-ids ${{ secrets.NEW_EC2_SECURITY_GROUP_ID }} \
            --query "Instances[0].InstanceId" \
            --output text)
          
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for EC2 to be running
        run: |
          aws ec2 wait instance-status-ok --instance-ids ${{ env.INSTANCE_ID }}

      - name: Get EC2 Public IP
        id: get-ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "public-ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Run Playwright test via SSH + Docker
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ steps.get-ip.outputs.public-ip }} << 'EOF'
            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 762593867198.dkr.ecr.eu-north-1.amazonaws.com
            docker pull 762593867198.dkr.ecr.eu-north-1.amazonaws.com/demo.playwright:latest
            docker run --rm 762593867198.dkr.ecr.eu-north-1.amazonaws.com/demo.playwright:latest playwright test --project=chromium
          EOF

      - name: Terminate EC2 instance
        if: ${{ always() }}
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
